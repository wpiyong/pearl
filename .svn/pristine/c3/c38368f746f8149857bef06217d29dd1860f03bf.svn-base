<Window x:Class="gPearlAnalyzer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:wpfx="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:vm="clr-namespace:gPearlAnalyzer.ViewModel"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        Title="GIA Fancy Color Identification Tool" Height="480" Width="900">
    
    <Window.Resources>
        <vm:InverseBooleanConverter x:Key="inverseBoolConverter" />
    </Window.Resources>

    <Window.InputBindings>
        <KeyBinding Command="{Binding ControlVM.CommandCancel}" Key="F12" />
        <KeyBinding Command="{Binding ControlVM.CommandMeasure}" Key="F11" />
    </Window.InputBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*" ></RowDefinition>
        </Grid.RowDefinitions>
        <StackPanel>
            <Menu KeyboardNavigation.TabNavigation="Cycle" DataContext="{Binding MenuVM}">
                <MenuItem Header="_Admin">
                    <MenuItem Header="Log in" Command="{Binding CommandAdmin}" Visibility="{Binding IsNotAdmin}" />
                    <MenuItem Header="Log out" Command="{Binding CommandLogOut}" Visibility="{Binding IsAdmin}" />
                </MenuItem>
                <MenuItem Header="_Settings" Visibility="{Binding IsAdmin}">
                    <MenuItem Header="CameraTop" Command="{Binding CommandCameraSettings}" CommandParameter="0"/>
                    <MenuItem Header="CameraSide" Command="{Binding CommandCameraSettings}" CommandParameter="1"/>
                    <!--<MenuItem Header="Other" Command="{Binding CommandSettings}"/>-->
                </MenuItem>
                <MenuItem Header="_Help">
                    <MenuItem Header="About gColor" Command="{Binding CommandAbout}" />
                </MenuItem>
            </Menu>
            <Grid>
                <ToolBarTray x:Name="toolBar" DataContext="{Binding ControlVM}" VerticalAlignment="Center">
                    <ToolBar Margin="0,5" Band="1" BandIndex="1" IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                        <Button ToolTip="Connect to Camera" VerticalAlignment="Center" Style="{StaticResource ToolbarButton}"
                                Command="{Binding CommandConnect}">
                            <Image Source="..\Images\camera.png" />
                        </Button>
                    </ToolBar>
                    <ToolBar Margin="0,5" Band="1" BandIndex="2" IsEnabled="{Binding Connected}" VerticalAlignment="Center">
                        <Button ToolTip="Calibrate" VerticalAlignment="Center" Style="{StaticResource ToolbarButton}"
                                Command="{Binding CommandCalibrate}"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\calibrate.png" Height="32"/>
                        </Button>
                        <Button ToolTip="Calibrate single image" Style="{StaticResource ToolbarButton}"
                                Command="{Binding CommandCalibrateSingle}"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\calibrate_single.png" />
                        </Button>
                        <Button ToolTip="{Binding MeasureIconToolTip}" Style="{StaticResource ToolbarButton}"
                                Command="{Binding CommandMeasure}"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\measurement.png" />
                        </Button>
                        <Button ToolTip="Single measure" Style="{StaticResource ToolbarButton}"
                                Command="{Binding CommandMeasureSingle}"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\measurement_single.png" />
                        </Button>
                        <!--<Button ToolTip="Repeat Measurments" Style="{StaticResource ToolbarButton}"
                             Command="{Binding CommandMeasureMany}"
                             IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                             <Image Source="..\Images\measurement_many.png" />
                             </Button>-->
                        <Button Style="{StaticResource ToolbarButton}"
                                Command="{Binding CommandCancel}"
                                IsEnabled="{Binding Busy}">
                            <Image Source="..\Images\cancel.png" />
                        </Button>
                    </ToolBar>
                    <ToolBar Margin="0,5" Band="1" BandIndex="3"  IsEnabled="{Binding Connected}" VerticalAlignment="Center">
                        <Button ToolTip="Calibrate Motor" Style="{StaticResource ToolbarButton}"
                                Command="{Binding CommandCalibrateMotor}"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\calibrate_ref.png" Width="32"/>
                        </Button>
                        <Button ToolTip="Light On/Off"
                                Command="{Binding CommandLightOn}"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\light.png" />
                        </Button>

                        <Button ToolTip="Move Up"
                                Command="{Binding CommandMoveUpDown}"
                                CommandParameter="true"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\up.png" Width="32"/>
                        </Button>

                        <Button ToolTip="Move Down"
                                Command="{Binding CommandMoveUpDown}"
                                CommandParameter="false"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\down.png" Width="32" />
                        </Button>
                        <Button ToolTip="Rotate Stage"
                                Command="{Binding CommandRotateStage}"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\rotate.png" Width="32" />
                        </Button>
                        <ToggleButton ToolTip="Object Detect On/Off"
                                      IsChecked="{Binding ObjectDetectOn}"
                                      IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\object_detect.png" />
                        </ToggleButton>
                   
                        <Button ToolTip="Take snapshot image" Style="{StaticResource ToolbarButton}"
                                Command="{Binding CommandSave}"
                                IsEnabled="{Binding Path=Busy, Converter={StaticResource inverseBoolConverter} }">
                            <Image Source="..\Images\save.png" />
                        </Button>
                        <!--<Button ToolTip="Show graph" Style="{StaticResource ToolbarButton}"
                             Command="{Binding CommandGraph}"
                             >
                             <Image Source="..\Images\chart.png" />
                             </Button>-->
                    </ToolBar>
                </ToolBarTray>
                <ToolBarTray DataContext="{Binding ControlVM}" HorizontalAlignment="Right" VerticalAlignment="Center" Width="Auto" Height="{Binding ElementName=toolBar, Path=ActualHeight}">
                    <ToolBar ToolBarTray.IsLocked="True" Margin="0,5" VerticalAlignment="Center" Visibility="Collapsed">
                        <StackPanel Orientation="Horizontal">
                            <CheckBox ToolTip="Using Manual Mask" VerticalContentAlignment="Center" Width="24" Height="24" IsThreeState="False" IsChecked="{Binding Path=UsingManualMask, Mode=TwoWay}"></CheckBox>
                            <Button IsEnabled="{Binding Path=UsingManualMask}" Padding="0, -8, 0, 0" ToolTip="Increase Mask Size" Content="+" Height="28" Width="28" Margin="0,0,3,0" FontSize="28" Command="{Binding CommandAdjustManualMask}" CommandParameter="1"></Button>
                            <Button IsEnabled="{Binding Path=UsingManualMask}" Padding="0, -8, 0, 0" ToolTip="Decrease Mask Size" Content="-" Height="28" Width="28" Margin="3,0,3,0" FontSize="28" Command="{Binding CommandAdjustManualMask}" CommandParameter="-1"></Button>
                            <ComboBox IsEnabled="{Binding Path=UsingManualMask}" ToolTip="Mask Shape" Margin="10" ItemsSource="{Binding MaskNames}" SelectedItem="{Binding MaskName, Mode=TwoWay}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding}" />
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>
                    </ToolBar>
                    <ToolBar IsEnabled="{Binding Connected}" ToolBarTray.IsLocked="True" Margin="0,5" VerticalAlignment="Center">
                        <StackPanel Orientation="Horizontal">
                            <CheckBox ToolTip="Compare" VerticalContentAlignment="Center" Width="24" Height="24" IsThreeState="False" IsChecked="{Binding Path=CompareMeasurement, Mode=TwoWay}"></CheckBox>
                            <CheckBox ToolTip="Move Plate Down" VerticalContentAlignment="Center" Width="24" Height="24" IsThreeState="False" IsChecked="{Binding Path=MovePlateDown, Mode=TwoWay}"></CheckBox>
                            <CheckBox ToolTip="Calculate Stone Dimension" VerticalContentAlignment="Center" Width="24" Height="24" IsThreeState="False" IsChecked="{Binding Path=CalDimension, Mode=TwoWay}"></CheckBox>
                            <Button Padding="0, -8, 0, 0" ToolTip="Increase Cropped Image Size" Content="+" Height="28" Width="28" Margin="0,0,3,0" FontSize="28" Command="{Binding CommandAdjustCropSize}" CommandParameter="1"></Button>
                            <Button Padding="0, -8, 0, 0" ToolTip="Decrease Cropped Image Size" Content="-" Height="28" Width="28" Margin="3,0,3,0" FontSize="28" Command="{Binding CommandAdjustCropSize}" CommandParameter="-1"></Button>
                        </StackPanel>
                        <!--<Button ToolTip="Calculate size" Style="{StaticResource ToolbarButton}"
                            Command="{Binding CommandTesting}">
                            <Image Source="..\Images\stop.png" Width="32" Height="32"/>
                        </Button>-->
                        <Button ToolTip="stage settings" Style="{StaticResource ToolbarButton}"
                            Command="{Binding CommandStageSettings}">
                            <Image Source="..\Images\stagesettings.png" Height="32"/>
                        </Button>
                    </ToolBar>
                </ToolBarTray>
            </Grid>
        </StackPanel>
        <Grid Grid.Row="1" DataContext="{Binding ControlVM}">
            <Grid.RowDefinitions>
                <RowDefinition></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="24"></RowDefinition>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*"></ColumnDefinition>
                <ColumnDefinition Width="{Binding GridSplitterWidth}"></ColumnDefinition>
                <ColumnDefinition Width="{Binding LogWindowWidth, Mode=TwoWay}"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Border>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="5" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Column="2" x:Name="gridCameraImage">
                        <Image x:Name="ImageTop" Source="{Binding CameraImage}" VerticalAlignment="Center"
                               vm:SizeObserver.Observe="True" 
                               vm:SizeObserver.ObservedWidth="{Binding ImageContainerWidth, Mode=OneWayToSource}"
                               vm:SizeObserver.ObservedHeight="{Binding ImageContainerHeight, Mode=OneWayToSource}"></Image>
                        <vm:NoSizeDecorator Height="1" Margin="{Binding CrossHairVerticalOffset}">
                            <Line StrokeThickness="1" X2="{Binding ActualWidth, RelativeSource={RelativeSource Self}}"
                                  Stroke="{Binding CrossHairBrush}" 
                                  StrokeDashArray="10 5">
                            </Line>
                        </vm:NoSizeDecorator>
                        <vm:NoSizeDecorator Width="1" Margin="{Binding CrossHairHorizontalOffset}">
                            <Line StrokeThickness="1" Y2="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
                                  Stroke="{Binding CrossHairBrush}"
                                  StrokeDashArray="10 5" >
                            </Line>
                        </vm:NoSizeDecorator>
                        <Viewbox Stretch="Fill" Width="{Binding ElementName=ImageTop, Path=ActualWidth}" Height="{Binding ElementName=ImageTop, Path=ActualHeight}">
                            <Canvas Background="Transparent"  x:Name="CanvasDrawTop" IsHitTestVisible="False" Width="{Binding Path=WidthTop}" Height="{Binding Path=HeightTop}">
                            </Canvas>
                        </Viewbox>
                    </Grid>
                    <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Stretch" />
                    <Grid Grid.Column="0" x:Name="gridCameraImageSide">
                        <Image x:Name="ImageSide" Source="{Binding CameraImageSide}" VerticalAlignment="Center"
                               vm:SizeObserver.Observe="True" 
                               vm:SizeObserver.ObservedWidth="{Binding ImageContainerWidth, Mode=OneWayToSource}"
                               vm:SizeObserver.ObservedHeight="{Binding ImageContainerHeight, Mode=OneWayToSource}"></Image>
                        <vm:NoSizeDecorator Height="1" Margin="{Binding CrossHairVerticalOffset}">
                            <Line StrokeThickness="1" X2="{Binding ActualWidth, RelativeSource={RelativeSource Self}}"
                                  Stroke="{Binding CrossHairBrush}" 
                                  StrokeDashArray="10 5">
                            </Line>
                        </vm:NoSizeDecorator>
                        <vm:NoSizeDecorator Width="1" Margin="{Binding CrossHairHorizontalOffset}">
                            <Line StrokeThickness="1" Y2="{Binding ActualHeight, RelativeSource={RelativeSource Self}}"
                                  Stroke="{Binding CrossHairBrush}"
                                  StrokeDashArray="10 5" >
                            </Line>
                        </vm:NoSizeDecorator>
                        <Viewbox Stretch="Fill" Width="{Binding ElementName=ImageSide, Path=ActualWidth}" Height="{Binding ElementName=ImageSide, Path=ActualHeight}">
                            <Canvas Background="Transparent"  x:Name="CanvasDraw" IsHitTestVisible="False" Width="{Binding Path=WidthSide}" Height="{Binding Path=HeightSide}">
                            </Canvas>
                        </Viewbox>
                    </Grid>
                </Grid>
            </Border>
            <GridSplitter Background="#FFD3D3D3"  Grid.Column="1" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
            <DockPanel Grid.Column="2" DataContext="{Binding LogEntryVM}">
                <ItemsControl ItemsSource="{Binding LogEntries}" Style="{StaticResource LogViewerStyle}">
                    <ItemsControl.Template>
                        <ControlTemplate>
                            <ScrollViewer CanContentScroll="True">
                                <i:Interaction.Behaviors>
                                    <vm:AutoScrollBehavior />
                                </i:Interaction.Behaviors>
                                <ItemsPresenter/>
                            </ScrollViewer>
                        </ControlTemplate>
                    </ItemsControl.Template>
                    <ItemsControl.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Export Log" Command="{Binding CommandExportLog}"/>
                        </ContextMenu>
                    </ItemsControl.ContextMenu>
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsItemsHost="True"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </DockPanel>
            <Popup Grid.Row="1" PlacementTarget="{Binding ElementName=toolBar}" Placement="Bottom" 
                   DataContext="{Binding LogEntryVM}"
                   IsOpen="{Binding ShowPopup}" 
                   StaysOpen="False" AllowsTransparency="True"
                   PopupAnimation="Slide"
                   HorizontalOffset="10" 
                   VerticalOffset="5">
                <Border BorderBrush="SlateBlue" BorderThickness="5" CornerRadius="2"
                        Padding="5">
                    <TextBlock Text="{Binding Message}" x:Name="txtPopupMessage"
                               Width="350"
                               TextWrapping="Wrap" FontSize="22"/>
                </Border>
            </Popup>
            <Grid Grid.Row="2" Grid.ColumnSpan="3" Background="LightGray">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0.8*"></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <Label Grid.Column="0" HorizontalAlignment="Left" Content="{Binding Status}"></Label>
                <wpfx:BusyIndicator Grid.Column="1" x:Name="BusyBar" 
                                    IsBusy="{Binding Busy}" 
                                    HorizontalAlignment="Right" Height="20" VerticalAlignment="Center"/>
            </Grid>
        </Grid>
    </Grid>
</Window>
